package com.safetynet.api.service.dataservice;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.safetynet.api.model.FireStation;

@SpringBootTest
class FireStationServiceTest {
	@Autowired
	private FireStationService fireStationServiceUnderTest;

	private FireStation fireStationTest;
	private FireStation fireStationTest2;
	private List<FireStation> fireStations;

	@BeforeEach
	void setUpPerTest() {
		fireStationTest = new FireStation("5", "46  rue de la mairie");
		fireStationTest2 = new FireStation("6", "16 rue du quartiers des combatants");
		fireStationServiceUnderTest.addFireStation(fireStationTest);
		fireStationServiceUnderTest.addFireStation(fireStationTest2);
		fireStations = fireStationServiceUnderTest.getAllFireStations();
	}

	@AfterEach
	void reInitPerTest() {
		fireStations.clear();
	}

	@Test
	void testGenerateId() throws Exception {
		FireStation fireStationCreated = new FireStation("7", "15 rue de Dax");

		fireStationServiceUnderTest.generateId(fireStationCreated);
		fireStations.add(fireStationCreated);

		List<FireStation> resultFireStationsByAddress = fireStationServiceUnderTest
				.getFireStationsByAddress("15 rue de Dax");
		
		for(FireStation fireStationFoundByAddress: resultFireStationsByAddress ) {
			if(fireStationFoundByAddress.getStationNumber()=="7") {
				String resultIdGereratedOfFirestationStationRetrievedByAddress = fireStationFoundByAddress.getId();
				
				assertAll("assertion generation id of firestation created found by address",
						// checking setting id not null
						() -> assertNotNull(resultIdGereratedOfFirestationStationRetrievedByAddress),
						// checking setting id generated by the method generateId() is equal to id
						// retrieved with getFireStationByAddress()
						() -> assertTrue(
								fireStationCreated.getId().contains(resultIdGereratedOfFirestationStationRetrievedByAddress)));
			}	
		}
	
	}

	@Test
	void testAddFireStation() throws Exception {
		FireStation fireStationCreated = new FireStation("8", "15 rue de Dax");
		try {
			fireStationServiceUnderTest.addFireStation(fireStationCreated);

			List<FireStation>resultFireStationsByAddress = fireStationServiceUnderTest
					.getFireStationsByAddress("15 rue de Dax");
			String expectedStationNumber = fireStationCreated.getStationNumber();
			String expectedAddress = fireStationCreated.getAddress();
			 assertNotNull(resultFireStationsByAddress);
			 
			for(FireStation fireStationFoundByAddress: resultFireStationsByAddress ) {		 
				if(fireStationFoundByAddress.getStationNumber()=="8") {
					String resultIdOfFirestationStationCreatedByAddress = fireStationFoundByAddress.getId();		
					assertAll("assertion all data of firestation created found by address",
										// checking setting id with request post
							() -> assertNotNull(fireStationFoundByAddress.getId() ),
							() -> assertEquals(expectedStationNumber, fireStationFoundByAddress.getStationNumber()),
							() -> assertEquals(expectedAddress, fireStationFoundByAddress.getAddress()));
				}
			}		
		} catch (AssertionError e) {
			fail(e.getMessage());
		}
	}

	@Test
	void testAddStationNumberOfExistingFireStation() throws Exception {
		FireStation fireStationCreatedWithNewStationNumber = new FireStation("9", "46  rue de la mairie");
		try {
		
			fireStationServiceUnderTest.addStationNumberOfFireStationWithExistingAddress("46  rue de la mairie",
					fireStationCreatedWithNewStationNumber);

			List<FireStation> resultFireStationsByAddress = fireStationServiceUnderTest
					.getFireStationsByAddress("46  rue de la mairie");
			String expectedStationNumberCreated = fireStationCreatedWithNewStationNumber.getStationNumber();
			
			for(FireStation  existingFireStationFoundByAddress: resultFireStationsByAddress ) {
				//String newStationNumberOfFireStationCreatedWithFoundByAddress=existingFireStationFoundByAddress.getStationNumber("8");
				// checking firestation with new station number created with existing address
			 
				if(existingFireStationFoundByAddress.getStationNumber()=="9") {
					
				}
				assertAll(
						"assertion of new station number of firestation created firestation found by existing address",
						// checking firestation with new station number created with existing address
						() -> assertNotNull(existingFireStationFoundByAddress.getStationNumber("8"),
						// checking firestation with new station number is present in list of firestations with existing address
						() -> assertTrue(fireStations.contains(existingFireStationFoundByAddress.getStationNumber("8")));
							
			}
			
		} catch (AssertionError e) {
			fail(e.getMessage());
		}
	}

	@Test
	void testAddStationNumberOfExistingFireStation_WithNoExistingFireStationByAddress() throws Exception {
		FireStation fireStationCreatedWithNewStationNumber = new FireStation("8", "45 No existing address");
		try {

			fireStationServiceUnderTest.addStationNumberOfFireStationWithExistingAddress(" 45 No existing address",
					fireStationCreatedWithNewStationNumber);

			List<FireStation> resultFireStationCreatedRetrievedWithNewStationNumber = fireStationServiceUnderTest
					.getFireStationsByAddress("45 No existing address");
			for(FireStation  existingFireStationFoundByAddress: resultFireStationCreatedRetrievedWithNewStationNumber) {
				
			}
			assertAll(
					"assertion of new station number of firestation created  firestation found by existing address",
					() -> assertNull(resultFireStationCreatedRetrievedWithNewStationNumber),
					// checking the firestation created is no present in the list of firestation
					() -> assertFalse(fireStations.contains(resultFireStationCreatedRetrievedWithNewStationNumber)));

		} catch (NullPointerException e) {
			assertThrows(NullPointerException.class,
					() -> fireStationServiceUnderTest.addStationNumberOfFireStationWithExistingAddress(" 45 No existing address",
							fireStationCreatedWithNewStationNumber));
		} catch (AssertionError e) {
			fail(e.getMessage());
		}
	}

/*	@Test
	void testAddAddressOfExistingFireStation() throws Exception {
		FireStation fireStationCreatedWithNewAddress = new FireStation("8", "46  rue de la mairie");
		try {
			// Before replacing this firestation
			List<FireStation >existingFireStationsFoundByStationNumber = fireStationServiceUnderTest.getFireStationsByStationNumber("6" );

			fireStationServiceUnderTest.addAddressOfExistingFireStation("6",
					fireStationCreatedWithNewAddress );

			// After replacing the ancien firestation found by station number
			List<FireStation >resultFireStationsCreatedRetrievedWithNewAddress = fireStationServiceUnderTest.getFireStationsByStationNumber("6");
			String expectedAddressCreated =fireStationCreatedWithNewAddress .getStationNumber();
			for(FireStation  fireStation:resultFireStationsCreatedRetrievedWithNewStationNumber ) {
				assertAll(
						"assertion of new station number of firestation created which replace existing firestation found by address",
						() -> assertNotNull(resultFireStationsCreatedRetrievedWithNewAddress ),
						() -> assertTrue(fireStations.contains(resultFireStationsCreatedRetrievedWithNewAddress )),
						// checking setting id
						() -> assertNotNull(resultFireStationsCreatedRetrievedWithNewAddress .getId()),
						// checking id is different than existing "fireStationTest"for new firestation
						// created
						() -> assertTrue(existingFireStationFoundByAddress
								.getId() != resultFireStationsCreatedRetrievedWithNewAddress .getId()),
						() -> assertTrue(expectedStationNumberCreated != "5" && expectedStationNumberCreated == "8"));
			}
		
		} catch (AssertionError e) {
			fail(e.getMessage());
		}
	}*/

}
