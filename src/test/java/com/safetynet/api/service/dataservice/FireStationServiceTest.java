package com.safetynet.api.service.dataservice;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.safetynet.api.model.FireStation;

@SpringBootTest
class FireStationServiceTest {
	@Autowired
	private FireStationService fireStationServiceUnderTest;

	private FireStation fireStationTest;
	private FireStation fireStationTest2;
	private List<FireStation> fireStations;

	@BeforeEach
	void setUpPerTest() {
		fireStationTest = new FireStation("5", "46  rue de la mairie");
		fireStationTest2 = new FireStation("6", "16 rue du quartiers des combatants");
		fireStationServiceUnderTest.addFireStation(fireStationTest);
		fireStationServiceUnderTest.addFireStation(fireStationTest2);
		fireStations = fireStationServiceUnderTest.getAllFireStations();
	}

	@AfterEach
	void reInitPerTest() {
		fireStations.clear();
	}

	@Test
	void testGenerateId() throws Exception {
		FireStation fireStationCreated = new FireStation("7", "15 rue de Dax");

		fireStationServiceUnderTest.generateId(fireStationCreated);
		fireStations.add(fireStationCreated);

		FireStation resultFireStationCreatedRetrievedByAddress = fireStationServiceUnderTest
				.getOneFireStationByAddress("15 rue de Dax");
		String resultFirestationStationRetrievedWithIdGererated = resultFireStationCreatedRetrievedByAddress.getId();
		assertAll("assertion generation id of firestation created found by address",
				// checking setting id not null
				() -> assertNotNull(resultFirestationStationRetrievedWithIdGererated),
				// checking setting id generated by the method generateId() is equal to id
				// retrieved with getFireStationByAddress()
				() -> assertTrue(
						fireStationCreated.getId().contains(resultFirestationStationRetrievedWithIdGererated)));
	}

	@Test
	void testAddFireStation() throws Exception {
		FireStation fireStationCreated = new FireStation("8", "15 rue de Dax");
		try {
			fireStationServiceUnderTest.addFireStation(fireStationCreated);

			FireStation resultFireStationCreatedRetrieved = fireStationServiceUnderTest
					.getOneFireStationByAddress("15 rue de Dax");
			String expectedStationNumber = fireStationCreated.getStationNumber();
			String expectedAddress = fireStationCreated.getAddress();

			assertAll("assertion all data of firestation created found by address",
					() -> assertNotNull(resultFireStationCreatedRetrieved),
					// checking setting id with request post
					() -> assertNotNull(resultFireStationCreatedRetrieved.getId()),
					() -> assertEquals(expectedStationNumber, resultFireStationCreatedRetrieved.getStationNumber()),
					() -> assertEquals(expectedAddress, resultFireStationCreatedRetrieved.getAddress()));
		} catch (AssertionError e) {
			fail(e.getMessage());
		}
	}

	@Test
	void testAddStationNumberOfExistingFireStation() throws Exception {
		FireStation fireStationCreatedWithNewStationNumber = new FireStation("8", "46  rue de la mairie");
		try {
            //Before replacing this firestation
			FireStation existingFireStationFoundByAddress = fireStationServiceUnderTest
					.getOneFireStationByAddress("46  rue de la mairie");

			fireStationServiceUnderTest.addStationNumberOfExistingFireStation("46  rue de la mairie",
					fireStationCreatedWithNewStationNumber);
			// After replacing the firestation with new firestation and new station number
			FireStation resultFireStationCreatedRetrievedWithNewStationNumber = fireStationServiceUnderTest
					.getOneFireStationByAddress("46  rue de la mairie");
			String expectedStationNumberCreated = fireStationCreatedWithNewStationNumber.getStationNumber();
			assertAll(
					"assertion of new station number of firestation created which replace existing firestation found by address",
					() -> assertNotNull(resultFireStationCreatedRetrievedWithNewStationNumber),
					// checking ancien firestation is removed and replaced by new firestation with
					// new station number created
					() -> assertFalse(fireStations.contains(existingFireStationFoundByAddress)),
					// checking setting id
					() -> assertNotNull(resultFireStationCreatedRetrievedWithNewStationNumber.getId()),
					// checking id is different for new firestation created
					() -> assertTrue(existingFireStationFoundByAddress
							.getId() != resultFireStationCreatedRetrievedWithNewStationNumber.getId()),
					() -> assertTrue(
							expectedStationNumberCreated != existingFireStationFoundByAddress.getStationNumber()
									&& expectedStationNumberCreated == "8"));

		} catch (AssertionError e) {
			fail(e.getMessage());
		}
	}

}
